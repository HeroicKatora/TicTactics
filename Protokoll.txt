TTTP v1

- If nothing on stderr, assume all good
- Meta characters in this document are []<>
- Escape character int this document is \
- As long as line from in stream does not match format, skip line, if not specified otherwise
- TTTP is new line based, all data comes in chunks of an integer number of lines
- No data chunks on stdout shall interleave, interleaving chunks on stdin produce undefined
behaviour, stderr is not strictly linear
- Protocol lines may not be longer than 1000 characters
- Output/Input starting with ":" shall be ignored for game flow, information only, until ":\n" is output
- Asynchronous Data must have an identifier in the form \[<id>\] in front of it.
Data with unknown or unexpected identifier can and should be discarded. An error musn't be thrown.
- 

This Protocol starts with [Game]

<engine name>: e.g. "Triple T Madness"
<engine setting>: Engine hints, no must

<setting>: One of
	[EnginePlayer:[P1]|[P2]|[None]]	//default None
	[MoveTime:[0..]]				//0 means inifite time, default 0
	[PlayerTime:[0..]]				//Total time for all turns, 0 infinite, default 0
	[MoveIncrement:[0..]]			//Time gain per move played, default 0
	[Initial moves:[0..9]]			//Initial moves per player, default 9
	[Init limit per board:[1..9]]	//How many field of one board you can take during init phase, default 2

<id>: [a..zA..Z]*
<Move>: B[1..9]F[1..9] //Board index, Field index
<printReq>: <printFull>|<printBoard>
<printFull>: Print full
<printBoard>: Print B[1..9]
<Field>: One of the following (with their names)
	VALID = '_';
	EMPTY = '~';
	Set1W1 = 'X';
	Set1WA = 'x';
	Set3W0	= '%';
	Set3W1 = '+';
	Set3W3 = '&';
	Set3W2 = '0';
	Set2W2 = 'O';
	Set2WA = 'o';
<Row>: <Field><Field><Field>
<Board>: <Row>\n<Row>\n<Row>
<GameState>: 
	[[<Row> <Row> <Row>\n][3]
	\n][2]
	[<Row> <Row> <Row>][3]

<Init error>:
	Init error <IError code> <IError index> <IError player>
<IError code>:
	DUPLICATE = 1,		//Move was duplicate
	INVALID = 2,		//A move was invalid (input could already catch)
	MIDDLE_MOVE = 3,	//Move was in the most center, 5|5
	FIELD_OVERFLOW = 4,	//More than one move on the same field
	BOARD_OVERFLOW = 5,	//More than two moves on the same board
	NOT_DURING_INIT = 6	//Game already going
<IError index>:[1..9] 	//Index of the wrong move
<IError player>: 1		//If player One
				 0		//If player Two
<player>: [Player One]|[Player Two]
<EngineOp>: One of
	go <time> <time> //tells the engine to give asynchronous updates about best moves
					 //First time is move time, second total time (increment is not to be altered during the game)
	pause			//Tells the engine to pause calculation, without forcing a "memory loss"
	stop			//Tells the engine to stop and drop all calculations done
	
<time>: One of
	<integer>[m|s|ms]
	<integer>m<integer>[s|ms]
	<integer>s<integer>ms
	<integer>m<integer>s<integer>ms

[Init phase]:
	"Player One init\n" << stdin
	<Move>[] p1M, p2M
	while(![Get Opening:p1M])
	":Player One is ready:\n" >> stdout	//optional, but recommended
	"Player Two init\n" << stdin
	while(![Get Opening:p2M])
	":Player Two is ready:\n" >> stdout	//optional, but recommended
	if([error:p1M, p2M]) 
		"<Init error>\n" >> sterr
		[Loose game:[traitor"]]
	"Start turns\n" << stdin

[Get Opening: <Move>[] moves]: << <bool>
	in << stdin
	if(in = <Move>)
		moves <<+ [init: in]
		[:Internal operation, add initial move]
	else if(in = <EngineOp>)
		[EngineOp: in]
	else
		"Wrong input\n" >> stderr
		[End game]
	if(len(moves) == [Inital moves])
		<< true
	<< false

[init: <Move> in]: << <Move>
	if(invalid move(m))
		"Invalid move\n" >> stderr
		[Loose game: player]
	<< in

[Turn]: << <bool>
	in << stdin
	if(in = <Move>)
		[play: in]
	else if(in = <EngineOp>)
		[EngineOp: in]
	else if(in = <printReq>)
		if(in = <printFull>) "<GameState>\n" >> stdout
		if(in = <printBoard>) "<Board>\n" >> stdout
	else
		"Wrong input\n" >> stderr
		[Win game: !player]
	if(isGameOver())
		<< false
	else
		<< true

[EngineOp: <EngineOp> op]:
	

[play: <Move> m]:
	if(invalid move(m))
		"Invalid move\n" >> stderr
		[Loose game: player]
	[:Internal operation, advances the turn]

[Game]:
	"TTTP v1\n" << stdin
	"<engine name>\n" >> stdout
	[Settings phase]
	"Start game\n" >> stdout
	[Init phase]
	while([Turn]);
	[Win game:[winner]]

[Settings phase]:
	[	phase << stdin
		if(phase = "Engine settings\n")
			["<engine setting>\n" << stdin]x?
			"End settings\n" << stdin
		else if(phase = "Game settings\n")
			["<setting>\n" << stdin]x?
			"End settings\n" << stdin
	]x?<1000
	"Start game\n" << stdin
	
[Loose game:<player> player]:
	"[player] lost himself the game\n" >> stdout
	[Win game: !player]
	
[Win game:<player> winner]:
	"[winner] has won\n" >> stdout
	[End Game]
	
[End game]:
	"<GameState>\n" >> stdout
	"End TTTP\n" >> stdout
	"End TTTP\n" << stdin (optional to wait)
	[End]
