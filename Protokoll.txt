TTTP v1
[1] Introduction and definitions
[1.0] Protocol Design
-1) If nothing on stderr, assume all is good
-2) Meta characters in this document are []<>
-3) Escape character in this document is \
-4) As long as line from in stream does not match format, skip line, if not specified otherwise
It is recommended to output a comment [see 1.0.8)] about it
-5) TTTP is new line based, all data comes in chunks of an integer number of lines
-6) No data chunks on stdout shall interleave, interleaving chunks on stdin produce undefined
behaviour, stderr is not strictly linear
-7) Protocol lines may not be longer than 1000 characters
-8) Output/Input starting with ":" shall be ignored for game flow, information only, until ":\n" is output
These can also be seen as data to own clients instead of the other client.
-9) Asynchronous Data must have an identifier in the form \[<id>\] in front of it. More
information about identifiers is found in [1.3], all reserved identifiers are listed under 
Formats [2.2]. Data with unknown or unexpected identifier can and should be discarded. 
An error or a warning musn't be produced. Each identifier is said to correspond to a channel.
-10) You are allowed to diverge slightly from this protocol if both communication partners
have considerable proof over each others wish to do so. An example for this could be an
increased line length for engines with very deep move output.

[1.1] Protocol flow
Protocol starts at [Game]
Terms in <> brackets refer to some format specified in [2]. If found on the right side of an
equal comparison, it is a test if the left side is of the format (or an equal representation
that is program internal)
Anything in [] brackets means a term that is dynamically evaluated or worked on by the programm,
for example a subroutine. If the definition is not found in this document and it can not be
deduced by name (no, this doc is not meant to be strictly formal), write a bug report on github.
A process [<id>:A] << B means that it takes A and produces B (mostly used with formats)
A process with id <internalID> is NOT specified in this doc and never will be as it is just
a there to remind you of logic order of operations. Too nice, I know.

[1.2] Protocol information page
The main page for discussion/ development information is www.github.com/HeroicKatora/TicTactis

[1.3] Identifiers
All identifiers starting with TTTP: are reserved for future use and mustn't be used. Handling
them in your own engine in some way is highly recommended, a full list of these can be found
in [2.2]. If the identifiers are engine specific, you should precede them with "<engine name>:"
to avoid possible conflicts and confusion. (This also discourages ridiculously long engine
names, implicitly by maximum line length).

[2] Formats
[2.1] Primitive and Data Type Formats
Multiple formats mean optional possibilities
<id>:
	<identifier constant>
	[a..zA..Z]x?
<bool>:
	true
	false
<Move>:
	B[1..9]F[1..9] //Board index, Field index
<Field>: One of the following (with their names)
	VALID = '_';
	EMPTY = '~';
	Set1W1 = 'X';
	Set1WA = 'x';
	Set3W0	= '%';
	Set3W1 = '+';
	Set3W3 = '&';
	Set3W2 = '0';
	Set2W2 = 'O';
	Set2WA = 'o';
<Row>: 
	<Field><Field><Field>
<Board>: 
	<Row>\n<Row>\n<Row>
<GameState>: 
	[[<Row> <Row> <Row>\n][x3]
	\n][x2]
	[<Row> <Row> <Row>][x3]
<time>:
	<integer>[m|s|ms]
	<integer>m<integer>[s|ms]
	<integer>s<integer>ms
	<integer>m<integer>s<integer>ms
<player>: There are two players, this does not define how they look in the program
	[internal:Player One]
	[internal:Player Two]

[2.1] Error formats
<Init error>:
	Init error <IError code> <IError index> <IError player>
<IError code>: Both sides of the equal sign are equivalent
	DUPLICATE = 1,		//Move was duplicate
	INVALID = 2,		//A move was invalid (input could already catch)
	MIDDLE_MOVE = 3,	//Move was in the most center, 5|5
	FIELD_OVERFLOW = 4,	//More than one move on the same field
	BOARD_OVERFLOW = 5,	//More than two moves on the same board
	NOT_DURING_INIT = 6	//Game already going
<IError index>:
	[1..9] 	//Index of the wrong move
<IError player>: 
	1		//If player One
	0		//If player Two
<invalid move>:
	<invalid move string>
<wrong input>:
	<wrong input string>
				 
[2.2] Constants
<identifier constant>:
	TTTP:Debug			//General debug information, best to log it
	TTTP:Meta			//Information about the protocol, may have future use like encoding
	TTTP:Chat			//Chat lines between human players
<protocol name>:
	TTTP v1
<start game>:
	Start game
<invalid move string>:
	Invalid move
<wrong input string>:
	Wrong input
<end protocol>:
	End TTTP
<p1 init>:
	Player One init
<p2 init>:
	Player Two init
<sPlayer>:
	Player One
	Player Two
<start e settings>:
	Engine settings
<start g settings>:
	Game settings
<end settings>:
	End settings
<start turns>:
	Start turns
<lost message>:
	 lost himself the game //Mind the space (kind of normal to have spaces between words)

[2.3] Settings
<engine setting>: Engine hints, no must
<setting>:
	[EnginePlayer:[P1]|[P2]|[None]]	//default None
	[MoveTime:[0..]]				//0 means inifite time, default 0
	[PlayerTime:[0..]]				//Total time for all turns, 0 infinite, default 0
	[MoveIncrement:[0..]]			//Time gain per move played, default 0
	[Initial moves:[0..9]]			//Initial moves per player, default 9
	[Init limit per board:[1..9]]	//How many field of one board you can take during init phase, default 2

[2.4] Print operations
<printReq>: 
	<printFull>
	<printBoard>
<printFull>: 
	Print full
<printBoard>: 
	Print B[1..9]
	
[2.5] Engine operations
<EngineOp>:
	go <time> <time> //tells the engine to give asynchronous updates about best moves
					 //First time is move time, second total time (increment is not to be altered during the game)
	pause			//Tells the engine to pause calculation, without forcing a "memory loss"
	stop			//Tells the engine to stop and drop all calculations done

[2.6] Engine specific constants
<engine name>: <id> //e.g. "Triple T Madness"

[3] Protocol flow

[Game]:
	"<protocol name>\n" << stdin
	"<engine name>\n" >> stdout
	[Settings phase]
	"<start game>\n" >> stdout
	[Init phase]
	while([Turn]);
	[Win game:[winner]]

[Init phase]:
	"<p1 init>\n" << stdin
	<Move>[] p1M, p2M
	while(![Get Opening:p1M])
	":[Debug]Player One is ready:\n" >> stdout	//optional, but recommended
	"<p2 init>\n" << stdin
	while(![Get Opening:p2M])
	":[Debug]Player Two is ready:\n" >> stdout	//optional, but recommended
	if([error:p1M, p2M]) 
		"<Init error>\n" >> sterr
		[Loose game:[traitor"]]
	"<start turns>\n" << stdin

[Get Opening: <Move>[] moves]: << <bool>
	in << stdin
	if(in = <Move>)
		moves <<+ [init: in]
		[:Internal operation, add initial move]
	else if(in = <EngineOp>)
		[EngineOp: in]
	else
		"<wrong input>\n" >> stderr
		[End game]
	if(len(moves) == [Inital moves])
		<< true
	<< false

[init: <Move> in]: << <Move>
	if(invalid move(m))
		"<invalid move>\n" >> stderr
		[Loose game: player]
	<< in

[Turn]: << <bool>
	in << stdin
	if(in = <Move>)
		[play: in]
	else if(in = <EngineOp>)
		[EngineOp: in]
	else if(in = <printReq>)
		if(in = <printFull>) "<GameState>\n" >> stdout
		if(in = <printBoard>) "<Board>\n" >> stdout
	else
		"<wrong input>\n" >> stderr
		[Win game: !player]
	if(isGameOver())
		<< false
	else
		<< true

[EngineOp: <EngineOp> op]:
	[interal operations] //For now, nothing more specified, thats bad but I am lazy and you are smart enough to think

[play: <Move> m]:
	if(invalid move(m))
		"<invalid move>\n" >> stderr
		[Loose game: player]
	[internal: operation, advances the turn]

[Settings phase]:
	[	phase << stdin
		if(phase = "<start e settings>\n")
			["<engine setting>\n" << stdin]x?
			"<end settings>\n" << stdin
		else if(phase = "<start g settings>\n")
			["<setting>\n" << stdin]x?
			"<end settings>\n" << stdin
	]x?<1000
	"<start game>\n" << stdin
	
[Loose game:<player> player]:
	"[PlayerRep:player]<lost message>\n" >> stderr
	[Win game: !player]
	
[Win game:<player> winner]:
	"[PlayerRep:player] has won\n" >> stdout
	[End Game]
	
[PlayerRep:<player> player]: << <sPlayer>
	if(player = [Player One])
		<<Player One
	else
		<<Player Two

[End game]:
	"<GameState>\n" >> stdout
	"<end protocol>\n" >> stdout
	"<end protocol>\n" << stdin (optional to wait)
	[End]

	